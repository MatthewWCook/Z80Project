0001   0000             ;***************************************************************************
0002   0000             ;  PROGRAM:			Z80 Mode 1 Interrupts        
0003   0000             ;  PURPOSE:			Tests that mode 1 interrupts function properly
0004   0000             ;  ASSEMBLER:		TASM 3.2        
0005   0000             ;  LICENCE:			The MIT Licence
0006   0000             ;  AUTHOR :			MCook
0007   0000             ;  CREATE DATE :	27 Apr 15
0008   0000             ;***************************************************************************
0009   0000             
0010   0000             ;ROM : 0000H - > 07FFH
0011   0000             ;RAM : 8000H - > 87FFH 
0012   0000             
0013   0000             UART0:       .EQU    $00            ; DATA IN/OUT
0014   0000             UART1:       .EQU    $01            ; CHECK RX
0015   0000             UART2:       .EQU    $02            ; INTERRUPTS
0016   0000             UART3:       .EQU    $03            ; LINE CONTROL
0017   0000             UART4:       .EQU    $04            ; MODEM CONTROL
0018   0000             UART5:       .EQU    $05            ; LINE STATUS
0019   0000             UART6:       .EQU    $06            ; MODEM STATUS
0020   0000             UART7:       .EQU    $07            ; SCRATCH REG.
0021   0000             
0022   0000             RAMTOP:      .EQU    $87FF			; Top address of RAM
0023   0000             STR_TER:     .EQU	 $FF            ; Mark END OF TEXT
0024   0000             CHR_HLD:     .EQU    $8000			; GET_CHAR_UART holding location			
0025   0000             
0026   0000             
0027   0000             .ORG $0000
0028   0000             
0029   0000             START:
0030   0000 F3          			DI
0031   0001 C3 00 01    			JP 		MAIN  			;Jump to the MAIN routine
0032   0004             			
0033   0038             .ORG $0038
0034   0038             
0035   0038             MODE1_INTERRUPT:
0036   0038 F3          			DI						;Disable interrupts
0037   0039 08          			EX		AF,AF'			;Save register states
0038   003A D9          			EXX        
0039   003B             			;Start interrupt routine
0040   003B CD 3F 01    			CALL	UART_RX	
0041   003E CD 2F 01    			CALL	UART_TX
0042   0041             			;End interrupt routine
0043   0041 D9          			EXX						;Restore register states
0044   0042 08          			EX		AF,AF'			
0045   0043 FB          			EI   					;Enable interrupts	 
0046   0044 C9          			RET
0047   0045             			
0048   0066             .ORG $0066
0049   0066             
0050   0066             NMI_CATCH:
0051   0066 C3 66 00    			JP		NMI_CATCH
0052   0069             			
0053   0100             .ORG $0100
0054   0100             
0055   0100             ;***************************************************************************
0056   0100             ;MAIN
0057   0100             ;Function: Entrance to user program
0058   0100             ;***************************************************************************
0059   0100             
0060   0100             MAIN:
0061   0100 31 FF 87    			LD		SP,RAMTOP
0062   0103 CD 10 01    			CALL	INIT_UART
0063   0106 CD 95 01    			CALL	PRINT_MON_HDR
0064   0109 ED 56       			IM 		1				;Use interrupt mode 1
0065   010B FB          			EI 						;Enable interrupts
0066   010C             END_PROGRAM:
0067   010C 76          			HALT
0068   010D C3 0C 01    			JP		END_PROGRAM
0069   0110             			
0070   0110             ;***************************************************************************
0071   0110             ;INIT_UART
0072   0110             ;Function: Initialize the UART to BAUD Rate 9600 (1.8432 MHz clock input)
0073   0110             ;***************************************************************************
0074   0110             
0075   0110             INIT_UART:
0076   0110 3E 80                   LD     A,$80			; Mask to Set DLAB Flag
0077   0112 D3 03       			OUT    (UART3),A
0078   0114 3E 0C       			LD     A,12				; Divisor = 12 @ 9600bps w/ 1.8432 Mhz
0079   0116 D3 00       			OUT    (UART0),A		; Set BAUD rate to 9600
0080   0118 3E 00       			LD     A,00
0081   011A D3 01       			OUT    (UART1),A		; Set BAUD rate to 9600
0082   011C 3E 03       			LD     A,$03
0083   011E D3 03       			OUT    (UART3),A		; Set 8-bit data, 1 stop bit, reset DLAB Flag
0084   0120 3E 01       			LD	   A,$01
0085   0122 D3 01       			OUT    (UART1),A		; Enable receive data available interrupt only
0086   0124 C9          			RET
0087   0125             			
0088   0125             ;***************************************************************************
0089   0125             ;UART_TX_READY
0090   0125             ;Function: Check if UART is ready to transmit
0091   0125             ;***************************************************************************
0092   0125             
0093   0125             UART_TX_RDY:
0094   0125 F5          			PUSH 	AF
0095   0126             UART_TX_RDY_LP:			
0096   0126 DB 05       			IN		A,(UART5)    	;Fetch the control register
0097   0128 CB 6F       			BIT 	5,A            	;Bit will be set if UART is ready to send
0098   012A CA 26 01    			JP		Z,UART_TX_RDY_LP		
0099   012D F1          			POP     AF
0100   012E C9          			RET
0101   012F             	
0102   012F             ;***************************************************************************
0103   012F             ;UART_TX
0104   012F             ;Function: Transmit character in A to UART
0105   012F             ;***************************************************************************
0106   012F             
0107   012F             UART_TX:
0108   012F CD 25 01    			CALL  UART_TX_RDY
0109   0132 D3 00       			OUT   (UART0),A
0110   0134 C9          			RET
0111   0135             				
0112   0135             ;***************************************************************************
0113   0135             ;UART_RX_READY
0114   0135             ;Function: Check if UART is ready to receive
0115   0135             ;***************************************************************************
0116   0135             
0117   0135             UART_RX_RDY:
0118   0135 F5          			PUSH 	AF
0119   0136             UART_RX_RDY_LP:			
0120   0136 DB 05       			IN		A,(UART5)    	;Fetch the control register
0121   0138 CB 47       			BIT 	0,A             ;Bit will be set if UART is ready to receive
0122   013A CA 36 01    			JP		Z,UART_RX_RDY_LP		
0123   013D F1          			POP     AF
0124   013E C9          			RET
0125   013F             	
0126   013F             ;***************************************************************************
0127   013F             ;UART_RX
0128   013F             ;Function: Receive character in UART to A
0129   013F             ;***************************************************************************
0130   013F             
0131   013F             UART_RX:
0132   013F CD 35 01    			CALL  UART_RX_RDY
0133   0142 DB 00       			IN    A,(UART0)
0134   0144 C9          			RET			
0135   0145             			
0136   0145             ;***************************************************************************
0137   0145             ;PRINT_MON_HDR
0138   0145             ;Function: Print out program header info
0139   0145             ;***************************************************************************
0140   0145             
0141   0145 5A 4D 41 43 PRINT_LINE_1: .BYTE "ZMAC80 Computer\t\t2015 MCook\n\r",STR_TER
0141   0149 38 30 20 43 
0141   014D 6F 6D 70 75 
0141   0151 74 65 72 09 
0141   0155 09 32 30 31 
0141   0159 35 20 4D 43 
0141   015D 6F 6F 6B 0A 
0141   0161 0D FF 
0142   0163 52 4F 4D 20 PRINT_LINE_2: .BYTE "ROM Monitor v0.1\n\r",STR_TER
0142   0167 4D 6F 6E 69 
0142   016B 74 6F 72 20 
0142   016F 76 30 2E 31 
0142   0173 0A 0D FF 
0143   0176 46 75 6E 63 PRINT_LINE_3: .BYTE "Function: Interrupt Test\n\r\n\r",STR_TER
0143   017A 74 69 6F 6E 
0143   017E 3A 20 49 6E 
0143   0182 74 65 72 72 
0143   0186 75 70 74 20 
0143   018A 54 65 73 74 
0143   018E 0A 0D 0A 0D 
0143   0192 FF 
0144   0193 3E FF       PRINT_LINE_4: .BYTE ">",STR_TER
0145   0195             
0146   0195             PRINT_MON_HDR:
0147   0195 21 45 01    			LD 		HL,PRINT_LINE_1		;Point HL to beginning of string
0148   0198 CD AE 01    			CALL    PRINT_STRING		;Print the string
0149   019B 21 63 01    			LD 		HL,PRINT_LINE_2
0150   019E CD AE 01    			CALL    PRINT_STRING
0151   01A1 21 76 01    			LD 		HL,PRINT_LINE_3
0152   01A4 CD AE 01    			CALL    PRINT_STRING
0153   01A7 21 93 01    			LD 		HL,PRINT_LINE_4
0154   01AA CD AE 01    			CALL    PRINT_STRING
0155   01AD C9          			RET
0156   01AE             			
0157   01AE             ;***************************************************************************
0158   01AE             ;PRINT_STRING
0159   01AE             ;Function: Print out string starting at MEM location (HL) to UART
0160   01AE             ;***************************************************************************
0161   01AE             
0162   01AE             PRINT_STRING:
0163   01AE 7E          			 LD		A,(HL)
0164   01AF FE FF                    CP     STR_TER             ; Test for end byte
0165   01B1 CA BB 01                 JP     Z,END_PRINT_STRING  ; Jump if end byte is found
0166   01B4 CD 2F 01    			 CALL   UART_TX
0167   01B7 23                       INC    HL                  ; Increment pointer to next char
0168   01B8 C3 AE 01                 JP     PRINT_STRING    	; Transmit loop
0169   01BB             END_PRINT_STRING:
0170   01BB C9          			 RET
0171   01BC             
0172   01BC             
0173   01BC             .END
ADDR  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
-----------------------------------------------------
0000  F3 C3 00 01 00 00 00 00 00 00 00 00 00 00 00 00
0010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0030  00 00 00 00 00 00 00 00 F3 08 D9 CD 3F 01 CD 2F
0040  01 D9 08 FB C9 00 00 00 00 00 00 00 00 00 00 00
0050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0060  00 00 00 00 00 00 C3 66 00 00 00 00 00 00 00 00
0070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00A0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00B0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00C0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00D0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00E0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00F0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0100  31 FF 87 CD 10 01 CD 95 01 ED 56 FB 76 C3 0C 01
0110  3E 80 D3 03 3E 0C D3 00 3E 00 D3 01 3E 03 D3 03
0120  3E 01 D3 01 C9 F5 DB 05 CB 6F CA 26 01 F1 C9 CD
0130  25 01 D3 00 C9 F5 DB 05 CB 47 CA 36 01 F1 C9 CD
0140  35 01 DB 00 C9 5A 4D 41 43 38 30 20 43 6F 6D 70
0150  75 74 65 72 09 09 32 30 31 35 20 4D 43 6F 6F 6B
0160  0A 0D FF 52 4F 4D 20 4D 6F 6E 69 74 6F 72 20 76
0170  30 2E 31 0A 0D FF 46 75 6E 63 74 69 6F 6E 3A 20
0180  49 6E 74 65 72 72 75 70 74 20 54 65 73 74 0A 0D
0190  0A 0D FF 3E FF 21 45 01 CD AE 01 21 63 01 CD AE
01A0  01 21 76 01 CD AE 01 21 93 01 CD AE 01 C9 7E FE
01B0  FF CA BB 01 CD 2F 01 23 C3 AE 01 C9 00 00 00 00


tasm: Number of errors = 0
